{"version":3,"sources":["containers/Navigation/Navigation.module.css","components/Spinner/Spinner.module.css","components/ButtonOverlay/binder_logo.png","components/ButtonOverlay/ButtonOverlay.module.css","containers/Navigation/Navigation.js","axios.js","components/Spinner/Spinner.js","components/ButtonOverlay/ButtonOverlay.js","components/Notebook/Notebook.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js","components/Notebook/Notebook.module.css","containers/Layout/Layout.module.css"],"names":["module","exports","Navigation","props","elements","dummy","config","navigation","Navbar","Text","navigationParser","navArray","level","length","Nav","Item","className","map","el","NavDropdown","id","label","title","key","eventKey","link","Link","bg","expand","Brand","href","homeUrl","classes","Toggle","aria-controls","Collapse","onSelect","navigator","target","src","width","height","alt","CONFIG","window","Config","Error","DEVELOPMENT","development","notebookHttp","axios","create","baseURL","url","interceptors","request","use","console","log","error","response","Spinner","icon","faSpinner","spin","size","color","message","style","ButtonOverlay","buttonCount","btnCls","ButtonGroup","github","binder","push","OneButton","TwoButtons","aria-label","Button","variant","faGithub","Binder","join","binderLogo","Chevron","disabled","faChevronRight","Notebook","loadingFinishedHandler","setState","loading","updateMessageHandler","loadPage","pageType","state","type","get","then","notebook","data","buildPage","catch","errored","errMessage","parseTypePageType","page","useContainer","split","pop","source","escapeHtml","NbContainer","srcDoc","site","this","prevProps","prevState","body","buttons","clsArray","HasContainer","Component","checkConfigValidity","conf","Array","isArray","every","e","Layout","navigateHandler","currentLink","findSiteFromLink","currentSite","validConfig","forEach","element","hasChild","find","Alert","Page","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.372afe1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Navigation_title__3fPDe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__24ERy\"};","module.exports = __webpack_public_path__ + \"static/media/binder_logo.fb62fd0a.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonOverlay\":\"ButtonOverlay_ButtonOverlay__VmmOm\",\"ButtonGroup\":\"ButtonOverlay_ButtonGroup__dxl69\",\"OneButton\":\"ButtonOverlay_OneButton__3m0R-\",\"TwoButtons\":\"ButtonOverlay_TwoButtons__1Etnu\",\"ThreeButtons\":\"ButtonOverlay_ThreeButtons__1VYUc\",\"Button\":\"ButtonOverlay_Button__3AYZN\",\"Chevron\":\"ButtonOverlay_Chevron__2KbQL\",\"Binder\":\"ButtonOverlay_Binder__1w2XD\"};","import React from 'react';\n\nimport {Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport classes from './Navigation.module.css';\n\n/**\n * Parse the given config to create a JSX navigation.\n * \n * TODOs:\n *  - needs error handling\n *  - put an empty message into the Dropdown, if empty\n */\nfunction navigationParser (navArray, level=0) {\n    if (navArray.length === 0) {\n        return <Nav.Item className=\"px-3\">no sites found</Nav.Item>\n    }\n    return navArray.map(el => {\n        if (el.navigation) {\n            return (\n                <NavDropdown id={el.label} title={el.label} key={el.label}>\n                    {navigationParser(el.navigation, 1)}\n                </NavDropdown>\n            );\n        } else {\n            if (level > 0) {\n                return <NavDropdown.Item key={el.label} eventKey={el.link}>{el.label}</NavDropdown.Item>\n            } else {\n                return (\n                    <Nav.Item key={el.label}>\n                        <Nav.Link eventKey={el.link}>{el.label}</Nav.Link>\n                    </Nav.Item>\n                )\n            }\n        }\n    })\n}\n\nconst Navigation = props => {\n    // build the navigation elements from config\n    let elements = null;\n    if (props.dummy || !props.config.navigation) {\n        elements =  <Navbar.Text>Corrupted configuration.js found.</Navbar.Text>\n    }  else {\n        elements = navigationParser(props.config.navigation);\n    }  \n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href={props.config.homeUrl ? props.config.homeUrl : '/'}>\n                <span className={classes.title}>{props.config.title ? props.config.title : 'Notebook Classroom'}</span>\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"menu\"></Navbar.Toggle>\n            <Navbar.Collapse id=\"menu\">\n                <Nav className=\"mx-auto\" onSelect={eventKey => props.navigator(eventKey)}>\n                    {elements}\n                </Nav>\n            </Navbar.Collapse>\n            <Nav.Item>\n                <Nav.Link className=\"navbar-text\" href=\"https://hydrocode.de\" target=\"_blank\">\n                    <img src=\"logo.png\" width=\"25\" height=\"25\" alt=\"logo\" /> a hydrocode application\n                </Nav.Link>\n            </Nav.Item>\n        </Navbar>\n    );\n}\n\nexport default Navigation;","import axios from 'axios';\n\nconst CONFIG = window.Config;\nif (!CONFIG) {\n    throw new Error('[axios.js] configuration.js not found.');\n}\n\nconst DEVELOPMENT = !!CONFIG.development ? true : false;\n\n/**\n * LOCAL \n * \n * instance for communicating with localhost. \n * in if deleopment is True, it will log all requests and \n * responses to the console. \n */\nconst notebookHttp = axios.create({\n    baseURL: !!CONFIG.url ? CONFIG.url : 'http://localhost:3000'\n});\n\nif (DEVELOPMENT) {\n    // Request\n    notebookHttp.interceptors.request.use(\n        request => {\n            console.log(request);\n            return request;\n        },\n        error => {\n            console.log(error);\n//            Promise.reject(error);\n        }\n    );\n\n    // Response\n    notebookHttp.interceptors.response.use(\n        response => {\n            console.log(response);\n            return response\n        },\n        error => {\n            console.log(error);\n//            Promise.reject(error);\n        }\n    );\n}\n\nexport {notebookHttp};","import React from 'react';\nimport classes from './Spinner.module.css';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSpinner} from '@fortawesome/free-solid-svg-icons';\n\nconst Spinner = props => (\n    <div className={classes.Spinner}>\n        <FontAwesomeIcon \n            icon={faSpinner} \n            spin \n            size={props.size ? props.size : \"5x\"} \n            color={props.color ? props.color : \"silver\"}\n        />\n        {props.message ? <p style={{color: props.color ? props.color : \"silver\"}}>{props.message}</p> : null}\n    </div>\n);\n\nexport default Spinner;","import React from 'react';\nimport classes from './ButtonOverlay.module.css';\n\nimport {Button, ButtonGroup} from 'react-bootstrap';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faChevronRight} from '@fortawesome/free-solid-svg-icons';\nimport {faGithub} from '@fortawesome/free-brands-svg-icons';\nimport binderLogo from './binder_logo.png';\n\nconst ButtonOverlay = props => {\n    let buttonCount = 0;\n    let btnCls = [classes.ButtonGroup];\n    \n    if(props.github) {\n        buttonCount += 1;\n    }\n    if (props.binder) {\n        buttonCount += 1;\n    }\n    // check if one or two buttons were set\n    if (buttonCount === 0) {\n        return null;\n    } else if  (buttonCount === 1){\n        btnCls.push(classes.OneButton);\n    } else if (buttonCount === 2) {\n        btnCls.push(classes.TwoButtons);\n    }\n\n    // return\n    return (\n        <div className={classes.ButtonOverlay}>\n            <ButtonGroup className={btnCls} aria-label=\"button-overlay\">\n                { props.github ? \n                <Button className={classes.Button} variant=\"default\" href={props.github}>\n                    <FontAwesomeIcon icon={faGithub} size=\"3x\" />\n                </Button> : null\n                }\n                {props.binder ? \n                <Button className={[classes.Button, classes.Binder].join(' ')} variant=\"default\" href={props.binder}>\n                    <img src={binderLogo} alt=\"binder\" width=\"57px\" />\n                </Button> : null\n                }\n                <Button variant=\"default\" className={classes.Chevron} disabled>\n                    <FontAwesomeIcon icon={faChevronRight} color=\"silver\" size=\"3x\" />\n                </Button>\n            </ButtonGroup>\n        </div>\n    );\n}\n\nexport default ButtonOverlay;\n","import React, {Component} from 'react';\nimport classes from './Notebook.module.css';\nimport {notebookHttp} from '../../axios';\n//import Markdown from 'react-markdown';\nimport Markdown from 'react-markdown/with-html'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Spinner from '../Spinner/Spinner';\nimport ButtonOverlay from '../ButtonOverlay/ButtonOverlay';\n\n/**\n * workflow: \n *  - set loading state\n *  - load notebook\n *  - create buttons (binder, github etc)\n *  - render (by disabling loading state)\n */\nclass Notebook extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            errored: !props.link,\n            errMessage: !props.link ? 'Error. The requested site is not available or not of type .html.' : null,\n            link: props.link,\n            config: props.site,\n            message: 'searching ' + props.link + '...',\n            notebook: null,\n            page: null,\n            useContainer: true\n        }\n    }\n\n    componentDidMount() {\n        this.loadPage();\n    }\n    \n\n    componentDidUpdate(prevProps, prevState) {\n        // check that the link actually changed on the properties\n        if ( prevProps.link !== this.props.link) {\n\n            // DEV\n//            console.log('Updated state. Props:');\n//            console.log(this.props);\n\n            this.setState({\n                loading: true,\n                errored: false,\n                errMessage: null, \n                message: 'searching ' + this.props.link + '...', \n                link: this.props.link,\n                config: this.props.site,\n                useContainer: true\n            }, this.loadPage);\n        }\n    }\n\n    loadingFinishedHandler = () => {\n        this.setState({loading: false});\n    }\n\n    updateMessageHandler = message => {\n        this.setState({message: message});\n    }\n\n    /**\n     * Actual implementation of loading request.\n     * This should be called asychronously while the \n     * loading state should be true.\n     * \n     * Dev: the response is only console.log at the moment\n     */\n    loadPage = () => {\n        const pageType = this.state.config && this.state.config.type ? `/${this.state.config.type}/` : '/nb/';\n        notebookHttp.get(pageType + this.state.link)\n        .then(response => {\n            this.setState({notebook: response.data}, this.buildPage);\n        })\n        .catch(error => {\n            this.setState({\n                errored: true, \n                errMessage: `The page ${this.state.link} could not be found.`\n            });\n        });\n    }\n\n    buildPage = () => {\n        this.updateMessageHandler('loading data...');\n        if (!this.state.notebook) {\n            // either error or use the last notebook from state\n            this.setState({\n                errored: true, \n                loading: false,\n                errMessage: `Cannot build a notebook page from ${this.state.link}`\n            });\n            return false;\n        }\n\n        // start building the page\n        this.updateMessageHandler('building the page...');\n        const [page, useContainer] = this.parseTypePageType();\n\n        // set page but and stop loading when done.\n        this.setState({page: page, useContainer: useContainer}, this.loadingFinishedHandler);\n    }\n\n    parseTypePageType = () => {\n        // check if file ends on .html or .md\n        const fileEnding = this.state.link.split('.').pop();\n\n        // page container \n        let page = null;\n        let useContainer = true;\n\n        if (fileEnding === 'md') {\n            page = (<Markdown source={this.state.notebook} escapeHtml={false} />);\n        } else {\n            // here, more file specific stuff could be done\n            //page = (<div className={classes.NbContainer} dangerouslySetInnerHTML={{__html: this.state.notebook}}></div>);\n            page = (<iframe className={classes.NbContainer} srcDoc={this.state.notebook} title={this.state.link}></iframe>);\n            useContainer = false;\n        }\n\n        return [page, useContainer];\n\n    }\n\n    render() {\n        let  body = null;\n        let buttons = null;\n\n        // still loading\n        if (this.state.loading) {\n            body = <Spinner size=\"10x\" message={this.state.message}></Spinner>\n        }\n\n        if (!this.state.loading && !this.state.errored && this.state.notebook) {\n            body = this.state.page;\n            if (!this.state.useContainer && this.state.config) {\n                // add another check here, to be sure that link properties are there\n                buttons = <ButtonOverlay github={this.state.config.github} binder={this.state.config.binder} />;\n            }\n        }\n\n        // show a error message if needed\n        if (this.state.errored) {\n            body =  <Alert variant=\"danger\">{this.state.errMessage ? this.state.errMessage : 'Unkown error occured.'}</Alert>\n        }\n\n        // parse the classes\n        const clsArray = [classes.Notebook];\n        if (this.state.useContainer) {\n            clsArray.push('container');\n            clsArray.push(classes.HasContainer);\n        }\n\n        return (\n            <div className={clsArray.join(' ')}>\n                {buttons}\n                {body}\n            </div>\n        );\n    }\n}\n\nexport default Notebook;","import React, {Component} from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport classes from './Layout.module.css';\nimport Navigation from '../Navigation/Navigation';\nimport { Alert } from 'react-bootstrap';\nimport Notebook from '../../components/Notebook/Notebook';\n\nfunction checkConfigValidity(config) {\n    // get the linked configuration.js content\n    const conf = window.Config; \n    \n    // check if config and navigation config exist\n    if (!conf || !conf.navigation || !Array.isArray(conf.navigation)) {\n        return false;\n    }\n\n    // every navigation object needs a label and either a link or another navigation\n    if (!conf.navigation.every(e => !!(e.label && (e.link || e.navigation))  )) {\n        return false;\n    }\n    return conf;\n};\n\nclass Layout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            validConfig: checkConfigValidity(),\n            currentLink: 'index.md',\n            currentSite: {type: 'static'}\n        };\n    }\n\n    navigateHandler = link => {\n        if (link !== this.state.currentLink) {\n            const site = this.findSiteFromLink(link);\n            \n            // DEV\n//            console.log(`navigateHandler, searching site ${link} found: `)\n//            console.log(site);\n            this.setState({currentLink: link, currentSite: site});\n        }\n    }\n\n    findSiteFromLink = link => {\n        let site = null;\n        this.state.validConfig.navigation.forEach(element => {\n            if (element.navigation) {\n                const hasChild = element.navigation.find(el => el.link === link);\n                if (hasChild) {\n                    site = hasChild;\n                }\n            }\n            if (element.link === link) {\n                site = element;\n            }\n        });\n        return site;\n    }\n    \n    render() {\n        let errMessage = null;\n\n        if (!this.state.validConfig) {\n            errMessage = <Alert variant='danger'>\n                The <i>configuration.js</i> was not found or is corrupted. \n                Cannot build a proper Navigation.\n            </Alert>\n        }\n\n        // render\n        return (\n            <div className={classes.Layout}>\n                {\n                    errMessage ? \n                    <Navigation dummy /> : \n                    <Navigation \n                        config={this.state.validConfig} \n                        navigator={this.navigateHandler} \n                    />\n                }\n                <div className={classes.Page}>\n                {errMessage}\n                <Notebook link={this.state.currentLink} site={this.state.currentSite} />               \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Layout;","import React from 'react';\n\nimport Layout from './containers/Layout/Layout';\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Notebook\":\"Notebook_Notebook__25Qs-\",\"NbContainer\":\"Notebook_NbContainer__3ITS-\",\"HasContainer\":\"Notebook_HasContainer__1vv8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__37MHr\",\"Page\":\"Layout_Page__18rSs\",\"Error\":\"Layout_Error__pnPai\"};"],"sourceRoot":""}